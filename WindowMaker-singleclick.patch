diff -Nru WindowMaker-0.63.1/WPrefs.app/Expert.c WindowMaker-0.63.1.new/WPrefs.app/Expert.c
--- WindowMaker-0.63.1/WPrefs.app/Expert.c	Sat Jan  6 23:43:21 2001
+++ WindowMaker-0.63.1.new/WPrefs.app/Expert.c	Sun Jan  7 23:06:09 2001
@@ -54,6 +54,7 @@
     WMSetButtonSelected(panel->swi[4], GetBoolForKey("WindozeCycling"));
     WMSetButtonSelected(panel->swi[5], GetBoolForKey("DontConfirmKill"));
     WMSetButtonSelected(panel->swi[6], GetBoolForKey("DisableBlinking"));
+    WMSetButtonSelected(panel->swi[6], GetBoolForKey("SingleClickLaunch"));
 }
 
 
@@ -67,7 +68,7 @@
     WMResizeWidget(panel->frame, FRAME_WIDTH, FRAME_HEIGHT);
     WMMoveWidget(panel->frame, FRAME_LEFT, FRAME_TOP);
 
-    for (i=0; i<7; i++) {
+    for (i=0; i<8; i++) {
 	panel->swi[i] = WMCreateSwitchButton(panel->frame);
 	WMResizeWidget(panel->swi[i], FRAME_WIDTH-40, 25);
 	WMMoveWidget(panel->swi[i], 20, 20+i*25);
@@ -80,6 +81,7 @@
     WMSetButtonText(panel->swi[4], _("Use Windoze style cycling"));
     WMSetButtonText(panel->swi[5], _("Disable confirmation panel for the Kill command"));
     WMSetButtonText(panel->swi[6], _("Disable cycling color highlighting of icons"));
+    WMSetButtonText(panel->swi[6], _("Launch applications and restore windows with a single click"));
 
     WMRealizeWidget(panel->frame);
     WMMapSubwidgets(panel->frame);
@@ -102,6 +104,7 @@
     SetBoolForKey(WMGetButtonSelected(panel->swi[4]), "WindozeCycling");
     SetBoolForKey(WMGetButtonSelected(panel->swi[5]), "DontConfirmKill");
     SetBoolForKey(WMGetButtonSelected(panel->swi[6]), "DisableBlinking");
+    SetBoolForKey(WMGetButtonSelected(panel->swi[6]), "SingleClickLaunch");
 }
 
 
diff -Nru WindowMaker-0.63.1/src/WindowMaker.h WindowMaker-0.63.1.new/src/WindowMaker.h
--- WindowMaker-0.63.1/src/WindowMaker.h	Fri Nov 17 03:10:32 2000
+++ WindowMaker-0.63.1.new/src/WindowMaker.h	Sun Jan  7 23:02:54 2001
@@ -424,6 +424,9 @@
     /* shading animation */
     signed char shade_speed;
 
+	/* single click to lauch applications */
+	char single_click;
+
     int edge_resistance;
     char attract;
 
diff -Nru WindowMaker-0.63.1/src/appicon.c WindowMaker-0.63.1.new/src/appicon.c
--- WindowMaker-0.63.1/src/appicon.c	Wed Nov  1 16:40:16 2000
+++ WindowMaker-0.63.1.new/src/appicon.c	Sun Jan  7 23:02:54 2001
@@ -717,6 +717,7 @@
     int shad_x = 0, shad_y = 0, docking=0, dockable, collapsed = 0;
     int ix, iy;
     int clickButton = event->xbutton.button;
+	Bool hasMoved;
     Pixmap ghost = None;
     Window wins[2];
 
@@ -786,6 +787,7 @@
         XClearWindow(dpy, scr->dock_shadow);
     }
 
+	hasMoved = False;
     while (!done) {
 	WMMaskEvent(dpy, PointerMotionMask|ButtonReleaseMask|ButtonPressMask
 		    |ButtonMotionMask|ExposureMask, &ev);
@@ -795,6 +797,7 @@
 	    break;
 
 	 case MotionNotify:
+		hasMoved = True;
 	    if (!grabbed) {
 		if (abs(dx-ev.xmotion.x)>=MOVE_THRESHOLD
 		    || abs(dy-ev.xmotion.y)>=MOVE_THRESHOLD) {
@@ -925,6 +928,9 @@
 		wArrangeIcons(scr, True);
 
 	    done = 1;
+		if (!hasMoved && wPreferences.single_click) {
+			iconDblClick(desc, event);
+		}
 	    break;
 	}
     }
diff -Nru WindowMaker-0.63.1/src/defaults.c WindowMaker-0.63.1.new/src/defaults.c
--- WindowMaker-0.63.1/src/defaults.c	Sat Jan  6 22:28:02 2001
+++ WindowMaker-0.63.1.new/src/defaults.c	Sun Jan  7 23:02:54 2001
@@ -547,6 +547,9 @@
     {"DisableBlinking",	"NO",		NULL,
 	   &wPreferences.dont_blink,	getBool,	NULL
     },
+    {"SingleClickLaunch", "NO",		NULL,
+	   &wPreferences.single_click,	getBool,	NULL
+    },
       /* style options */
     {"MenuStyle", 	"normal",  		seMenuStyles,
 	&wPreferences.menu_style, getEnum, 	setMenuStyle
diff -Nru WindowMaker-0.63.1/src/dock.c WindowMaker-0.63.1.new/src/dock.c
--- WindowMaker-0.63.1/src/dock.c	Wed Nov  1 16:40:16 2000
+++ WindowMaker-0.63.1.new/src/dock.c	Sun Jan  7 23:02:54 2001
@@ -3752,7 +3752,7 @@
 
 
 
-static void
+static int
 handleIconMove(WDock *dock, WAppIcon *aicon, XEvent *event)
 {
     WScreen *scr = dock->screen_ptr;
@@ -3767,11 +3767,12 @@
     int ix = aicon->xindex, iy = aicon->yindex;
     int tmp;
     Pixmap ghost = None;
-    Bool docked;
+    Bool docked, hasMoved;
     int superfluous = wPreferences.superfluous; /* we catch it to avoid problems */
     int omnipresent = aicon->omnipresent; /* this must be cached!!! */
 
 
+    hasMoved = False;
     if (wPreferences.flags.noupdates)
 	return;
 
@@ -3822,6 +3823,7 @@
 	    break;
 
 	 case MotionNotify:
+		hasMoved = True;
 	    if (!grabbed) {
 		if (abs(ofs_x-ev.xmotion.x)>=MOVE_THRESHOLD
 		    || abs(ofs_y-ev.xmotion.y)>=MOVE_THRESHOLD) {
@@ -3977,7 +3979,10 @@
 #ifdef DEBUG
 	    puts("End icon move");
 #endif
-	    return;
+		if (!hasMoved) {
+			return 1;
+		}
+	    return 0;
 	}
     }
 }
@@ -4117,7 +4122,9 @@
             else
                 handleDockMove(dock, aicon, event);
         } else
-	    handleIconMove(dock, aicon, event);
+ 	    if (handleIconMove(dock, aicon, event) != 0 &&
+ 				wPreferences.single_click)
+               iconDblClick(desc, event);
 
     } else if (event->xbutton.button==Button2 && dock->type==WM_CLIP &&
                aicon==scr->clip_icon) {
diff -Nru WindowMaker-0.63.1/src/icon.c WindowMaker-0.63.1.new/src/icon.c
--- WindowMaker-0.63.1/src/icon.c	Sat Jan  6 22:28:02 2001
+++ WindowMaker-0.63.1.new/src/icon.c	Sun Jan  7 23:02:54 2001
@@ -874,6 +874,7 @@
     int dx=event->xbutton.x, dy=event->xbutton.y;
     int grabbed=0;
     int clickButton=event->xbutton.button;
+	Bool hasMoved;
 
     if (WCHECK_STATE(WSTATE_MODAL))
 	return;
@@ -916,6 +917,7 @@
 	wwarning("pointer grab failed for icon move");
 #endif
     }
+	hasMoved = False;
     while(1) {
 	WMMaskEvent(dpy, PointerMotionMask|ButtonReleaseMask|ButtonPressMask
 		   |ButtonMotionMask|ExposureMask, &ev);
@@ -925,6 +927,7 @@
 	    break;
 
 	 case MotionNotify:
+		hasMoved = True;
 	    if (!grabbed) {
 		if (abs(dx-ev.xmotion.x)>=MOVE_THRESHOLD
 		    || abs(dy-ev.xmotion.y)>=MOVE_THRESHOLD) {
@@ -962,6 +965,9 @@
 
 	    if (wPreferences.auto_arrange_icons)
 		wArrangeIcons(wwin->screen_ptr, True);
+		if (!hasMoved && wPreferences.single_click) {
+			miniwindowDblClick(desc, event);
+		}
 	    return;
 	    
 	}
